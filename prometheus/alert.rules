groups:
- name: targets
  rules:
  - alert: sql_exporter_down
    expr: up == 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "SQL exporter is down"
      description: "Service {{ $labels.instance }} is down."

- name: postgresql
  rules:
  - alert: pgsql_postmaster_down
    expr: (sql_pg_postmaster_uptime - sql_pg_postmaster_uptime offset 2m) < 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Postgres is down"
      description: "{{ $labels.job }} | postmaster_down | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_database_conflicts
    expr: sum(increase(sql_pg_stat_database_conflicts[1m])) by (instance, database) > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Postgres conflict detected"
      description: "{{ $labels.job }} | database_conflicts | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_prepared_xacts
    expr: sql_pg_prepared_xacts > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Prepared transaction detected"
      description: "{{ $labels.job }} | prepared_xacts | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_failed_wal
    expr: increase(sql_pg_stat_archiver{col="failed_wal"}[1m]) > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Failed attempt to archive wal detected"
      description: "{{ $labels.job }} | failed_wal | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_max_connections
    expr: 100 * sum(sql_pg_stat_activity_backends{col != "max_connections"}) / sum(sql_pg_stat_activity_backends{col = "max_connections"}) > 90
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Too many connections"
      description: "{{ $labels.job }} | max_connections | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_cache_hit_ratio
    expr: sql_pg_stat_database_cache_hit_ratio < 90
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Low cache hit ratio"
      description: "{{ $labels.job }} | max_connections | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_rolledback_xacts
    expr: increase(sql_pg_stat_database_transactions{col="rolledback"}[2m]) > 5
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Rollbacks occurred"
      description: "{{ $labels.job }} | rolledback_xacts | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_max_autovacuum_workers
    expr: sql_pg_stat_activity_autovacuum_workers{col="max"} == sql_pg_stat_activity_autovacuum_workers{col="total"}
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Pool of autovacuum workers is full"
      description: "{{ $labels.job }} | max_autovacuum_workers | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_long_xacts
    expr: sql_pg_stat_activity_max_xact_age > 60
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Long transaction detected"
      description: "{{ $labels.job }} | long_xacts | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_corrupted_page
    expr: sql_pg_current_logfile_errors{col="corrupted_pages"} > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Corrupted data page detected"
      description: "{{ $labels.job }} | corrupted_page | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_logfile_error
    expr: increase(sql_pg_current_logfile_errors{col="logfile_errors"}[5m]) > 10
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Errors in log file detected"
      description: "{{ $labels.job }} | corrupted_page | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_replication_lag
    expr: sql_pg_stat_replication_lag > 120
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Replica is too far behind"
      description: "{{ $labels.job }} | replication_lag | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_inactive_slot
    expr: sql_pg_replication_slots{col="inactive_slot"} > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Unused replication slot detected"
      description: "{{ $labels.job }} | inactive_slot | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_temp_files
    expr: sum(increase(sql_pg_stat_database_temp_files[5m])) by (instance, database) > 1e+08
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Too big temp files"
      description: "{{ $labels.job }} | temp_files | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_frequent_checkpoints
    expr: increase(sql_pg_stat_bgwriter_checkpoints{col="requested"}[2m]) > 3
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Checkpoints are occurred too frequently"
      description: "{{ $labels.job }} | frequent_checkpoints | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_kcache_hit_ratio
    expr: sql_pg_stat_kcache_hit_ratio{col="disk"} > 10
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "High disk hit ration"
      description: "{{ $labels.job }} | kcache_hit_ratio | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_xacts_before_wraparound_vacuum
    expr: sql_pg_database_xacts_before_wraparound_vacuum < 1e+06
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Autovacuum to prevent wraparound will occur soon"
      description: "{{ $labels.job }} | xacts_before_wraparound_vacuum | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_hba_config_changed
    expr: changes(sql_pg_settings_file_hash{file="pg_hba.conf"}[1m]) > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "pg_hba.conf changed"
      description: "{{ $labels.job }} | hba_config_changed | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_postgresql_config_changed
    expr: changes(sql_pg_settings_file_hash{file="postgresql.conf"}[1m]) > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "pg_hba.conf changed"
      description: "{{ $labels.job }} | postgresql_config_changed | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_orphaned_tables
    expr: sql_pg_stat_user_tables_orphaned > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Orphaned table detected"
      description: "{{ $labels.job }} | orphaned_tables | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_unused_indexes
    expr: sql_pg_stat_user_indexes_unused > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Unused index detected"
      description: "{{ $labels.job }} | unused_indexes | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_redundant_indexes
    expr: sql_pg_stat_user_indexes_redundant > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Redundant index detected"
      description: "{{ $labels.job }} | redundant_indexes | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_invalid_indexes
    expr: sql_pg_stat_user_indexes_invalid > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Invalid index detected"
      description: "{{ $labels.job }} | invalid_indexes | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_disabled_trigger
    expr: sql_pg_trigger_disabled > 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Disabled trigger detected"
      description: "{{ $labels.job }} | disabled_trigger | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_bloated_index
    expr: sql_pg_stat_user_indexes_bloated{col="wasted_bytes"} > 200000000 and sql_pg_stat_user_indexes_bloated{col="wasted_ratio"} > 20
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Too bloated index detected"
      description: "{{ $labels.job }} | bloated_index | {{ $labels.instance }} -- {{ $value }}"

  - alert: pgsql_bloated_table
    expr: sql_pg_stat_user_tables_bloated{col="wasted_bytes"} > 200000000 and sql_pg_stat_user_tables_bloated{col="wasted_ratio"} > 20
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Too bloated table detected"
      description: "{{ $labels.job }} | bloated_table | {{ $labels.instance }} -- {{ $value }}"
